WEBVTT

1
00:00:13.700 --> 00:00:16.380
So far, we have learned how to

2
00:00:16.380 --> 00:00:18.060
extract feature positions in

3
00:00:18.060 --> 00:00:19.890
the image and how to extract

4
00:00:19.890 --> 00:00:20.970
descriptors from

5
00:00:20.970 --> 00:00:23.445
the local neighborhood
of these features.

6
00:00:23.445 --> 00:00:25.230
This video, will teach you about

7
00:00:25.230 --> 00:00:27.270
the last step of
using features for

8
00:00:27.270 --> 00:00:29.310
computer vision applications in

9
00:00:29.310 --> 00:00:32.130
autonomous driving
feature matching.

10
00:00:32.130 --> 00:00:34.650
Specifically, we
will cover how to

11
00:00:34.650 --> 00:00:37.480
match features based
on distance functions,

12
00:00:37.480 --> 00:00:39.960
we will then describe
brute force matching

13
00:00:39.960 --> 00:00:43.130
as simple but powerful
feature matching algorithm.

14
00:00:43.130 --> 00:00:46.430
But first, let's remind
ourselves of how we intend to

15
00:00:46.430 --> 00:00:49.460
use features for a variety
of perception tasks.

16
00:00:49.460 --> 00:00:51.530
First, we identify
image features,

17
00:00:51.530 --> 00:00:53.560
distinctive points in our images.

18
00:00:53.560 --> 00:00:56.165
Second, we associate a descriptor

19
00:00:56.165 --> 00:00:58.580
for each feature from
its neighborhood.

20
00:00:58.580 --> 00:01:01.400
Finally, we use descriptors to

21
00:01:01.400 --> 00:01:04.130
match features across
two or more images.

22
00:01:04.130 --> 00:01:06.320
Afterwards, we can use

23
00:01:06.320 --> 00:01:08.150
the matched features
for a variety of

24
00:01:08.150 --> 00:01:10.135
applications including
state estimation,

25
00:01:10.135 --> 00:01:12.415
visual odometry, and
object detection.

26
00:01:12.415 --> 00:01:15.925
It is essential to identify
matches correctly however,

27
00:01:15.925 --> 00:01:18.230
as these applications
are susceptible to

28
00:01:18.230 --> 00:01:21.095
catastrophic failures
if incorrect matches

29
00:01:21.095 --> 00:01:22.895
are provided too frequently.

30
00:01:22.895 --> 00:01:25.370
As a result, feature
matching plays

31
00:01:25.370 --> 00:01:26.540
a critical role in

32
00:01:26.540 --> 00:01:29.600
robust perception methods
for self-driving cars.

33
00:01:29.600 --> 00:01:32.915
Here's an example of a
feature matching problem.

34
00:01:32.915 --> 00:01:36.500
Given a feature and it's
descriptor in image one,

35
00:01:36.500 --> 00:01:37.790
we want to try to find

36
00:01:37.790 --> 00:01:40.655
the best match for the
feature in image two.

37
00:01:40.655 --> 00:01:42.850
So how can we solve this problem?

38
00:01:42.850 --> 00:01:45.680
The simplest solution to
the matching problem is referred

39
00:01:45.680 --> 00:01:48.470
to as brute force
feature matching,

40
00:01:48.470 --> 00:01:50.335
and is described
as the following.

41
00:01:50.335 --> 00:01:53.570
First, define a distance
function d that

42
00:01:53.570 --> 00:01:57.440
compares the descriptors
of two features fi and fj,

43
00:01:57.440 --> 00:01:59.975
and defines the
distance between them.

44
00:01:59.975 --> 00:02:03.250
The more similar the two
descriptors are to each other,

45
00:02:03.250 --> 00:02:05.490
the smaller the
distance between them.

46
00:02:05.490 --> 00:02:09.505
Second, for every feature
fi in image one,

47
00:02:09.505 --> 00:02:12.080
we apply the distance
function d to compute

48
00:02:12.080 --> 00:02:15.490
the distance with
every feature fj in image two.

49
00:02:15.490 --> 00:02:17.360
Finally, we will return

50
00:02:17.360 --> 00:02:19.880
the feature which we'll
call fc from image

51
00:02:19.880 --> 00:02:22.100
two with the minimum distance to

52
00:02:22.100 --> 00:02:25.220
the feature fi in image
one as our match.

53
00:02:25.220 --> 00:02:28.580
This feature is known as
the nearest neighbor,

54
00:02:28.580 --> 00:02:30.470
and it is the closest feature to

55
00:02:30.470 --> 00:02:33.500
the original one in
the descriptor space.

56
00:02:33.500 --> 00:02:35.780
The most common distance function

57
00:02:35.780 --> 00:02:37.220
used to compare descriptors

58
00:02:37.220 --> 00:02:40.745
is the sum of
squared distances or SSD.

59
00:02:40.745 --> 00:02:44.030
Which penalizes variations
between two descriptors

60
00:02:44.030 --> 00:02:46.400
quadratically making it sensitive

61
00:02:46.400 --> 00:02:48.680
to large variations
in the descriptor,

62
00:02:48.680 --> 00:02:50.900
but insensitive to smaller ones.

63
00:02:50.900 --> 00:02:53.525
Other distance functions
such as the sum of

64
00:02:53.525 --> 00:02:56.419
absolute differences or
the Hamming distance

65
00:02:56.419 --> 00:02:58.940
are also viable alternatives.

66
00:02:58.940 --> 00:03:02.915
The sum of absolute difference
penalizes all variations

67
00:03:02.915 --> 00:03:05.045
equally while
the Hamming distance

68
00:03:05.045 --> 00:03:06.890
is used for binary features,

69
00:03:06.890 --> 00:03:10.505
for which all descriptor
elements are binary values.

70
00:03:10.505 --> 00:03:13.715
We will be using the SSD
distance function

71
00:03:13.715 --> 00:03:15.595
for our examples to follow.

72
00:03:15.595 --> 00:03:17.150
Our matching technique and

73
00:03:17.150 --> 00:03:19.250
distance choices are
really quite simple.

74
00:03:19.250 --> 00:03:21.320
But what do you think
might go wrong with

75
00:03:21.320 --> 00:03:24.005
our proposed nearest neighbor
matching technique?

76
00:03:24.005 --> 00:03:26.900
Let's look at
our first case and see

77
00:03:26.900 --> 00:03:29.885
how our brute force matcher
works in practice.

78
00:03:29.885 --> 00:03:33.125
Consider the feature inside
the yellow bounding box.

79
00:03:33.125 --> 00:03:34.640
For simplicity, this feature

80
00:03:34.640 --> 00:03:36.290
has a four-dimensional
descriptor,

81
00:03:36.290 --> 00:03:37.910
which we'll call f1.

82
00:03:37.910 --> 00:03:40.280
Let's compute the
distance between

83
00:03:40.280 --> 00:03:43.370
f1 and the first feature
in the image two,

84
00:03:43.370 --> 00:03:45.485
which we'll label f2.

85
00:03:45.485 --> 00:03:50.585
We get a sum of squared
difference or SSD value of nine.

86
00:03:50.585 --> 00:03:52.610
We then compute the
distance between

87
00:03:52.610 --> 00:03:55.310
f1 and the second
feature in image two,

88
00:03:55.310 --> 00:03:57.100
which we'll label f3.

89
00:03:57.100 --> 00:04:00.680
Here, we get an SSD of 652.

90
00:04:00.680 --> 00:04:02.555
We can now repeat
this process for

91
00:04:02.555 --> 00:04:05.390
every other feature in
the second image and

92
00:04:05.390 --> 00:04:07.460
find out that all the
other distances are

93
00:04:07.460 --> 00:04:10.190
similarly large relative
to the first one.

94
00:04:10.190 --> 00:04:13.040
We therefore choose feature f2 to

95
00:04:13.040 --> 00:04:16.265
be our match as it has
the lowest distance to f1.

96
00:04:16.265 --> 00:04:20.510
Visually, our brute force
approach appears to be working.

97
00:04:20.510 --> 00:04:22.520
As humans, we can immediately see

98
00:04:22.520 --> 00:04:24.440
that feature f1 in the image is

99
00:04:24.440 --> 00:04:26.030
indeed the same point of

100
00:04:26.030 --> 00:04:28.960
interest as feature
f2 in image two.

101
00:04:28.960 --> 00:04:31.310
Now, let us consider
a second case where

102
00:04:31.310 --> 00:04:32.780
our feature detector tries to

103
00:04:32.780 --> 00:04:34.460
match a feature from image one,

104
00:04:34.460 --> 00:04:37.475
for which there is no corresponding
feature in image two.

105
00:04:37.475 --> 00:04:40.130
Let's take a look at what
the brute force approach will

106
00:04:40.130 --> 00:04:43.210
do when our feature detector
encounters this situation.

107
00:04:43.210 --> 00:04:45.555
Following the same
procedure as before,

108
00:04:45.555 --> 00:04:47.540
we compute the SSD between

109
00:04:47.540 --> 00:04:50.300
the descriptors of a
feature f1 in image one,

110
00:04:50.300 --> 00:04:52.375
and all the features
in image two.

111
00:04:52.375 --> 00:04:55.260
Assume that f2 and f3 are
the nearest neighbors of

112
00:04:55.260 --> 00:04:58.745
f1 and with f2 having
the lowest score.

113
00:04:58.745 --> 00:05:01.850
Although at 441,
it is still rather

114
00:05:01.850 --> 00:05:04.235
dissimilar to the f1
feature descriptor

115
00:05:04.235 --> 00:05:05.870
from the original image.

116
00:05:05.870 --> 00:05:10.395
As a result, f2 will be
returned as our best match.

117
00:05:10.395 --> 00:05:12.640
Clearly, this is not correct.

118
00:05:12.640 --> 00:05:14.660
Because feature f1 is not

119
00:05:14.660 --> 00:05:17.540
the same point of interest
as feature f2 in the scene.

120
00:05:17.540 --> 00:05:19.715
So how can we solve this problem?

121
00:05:19.715 --> 00:05:22.070
We can solve
this problem by setting

122
00:05:22.070 --> 00:05:25.910
a distance threshold Delta on
the acceptance of matches.

123
00:05:25.910 --> 00:05:28.100
This means that
any feature in image

124
00:05:28.100 --> 00:05:31.070
two with a distance
greater than Delta to f1,

125
00:05:31.070 --> 00:05:34.070
is not considered a
match even if it has

126
00:05:34.070 --> 00:05:35.180
the minimum distance to

127
00:05:35.180 --> 00:05:37.040
f1 among all the features
in image two.

128
00:05:37.040 --> 00:05:38.600
Now, let's update

129
00:05:38.600 --> 00:05:41.900
our brute force matcher
algorithm with our threshold.

130
00:05:41.900 --> 00:05:44.485
We usually define
Delta empirically,

131
00:05:44.485 --> 00:05:46.310
as it depends on
the application at

132
00:05:46.310 --> 00:05:48.470
hand and the descriptor
we are using.

133
00:05:48.470 --> 00:05:50.870
Once again, we define
our distance function to

134
00:05:50.870 --> 00:05:54.575
quantify the similarity of
two feature descriptors.

135
00:05:54.575 --> 00:05:57.680
We also fix a maximum
distance threshold

136
00:05:57.680 --> 00:05:59.450
Delta for acceptable matches.

137
00:05:59.450 --> 00:06:01.940
Then, for every feature
in image one,

138
00:06:01.940 --> 00:06:05.150
we compute the distance to
each feature in image two and

139
00:06:05.150 --> 00:06:06.590
store the shortest distance or

140
00:06:06.590 --> 00:06:08.780
nearest neighbor as
the most likely match.

141
00:06:08.780 --> 00:06:10.970
Brute force matching
is suitable when

142
00:06:10.970 --> 00:06:13.535
the number of features we
want to match is reasonable,

143
00:06:13.535 --> 00:06:16.370
but has quadratic
computational complexity

144
00:06:16.370 --> 00:06:19.985
making it ill-suited as the
number of features increases.

145
00:06:19.985 --> 00:06:22.070
For large sets of features,

146
00:06:22.070 --> 00:06:23.750
special data structures such as

147
00:06:23.750 --> 00:06:27.305
k-d trees are used to
enhance computation time.

148
00:06:27.305 --> 00:06:30.245
Both brute force and
k-d tree-based matchers

149
00:06:30.245 --> 00:06:32.345
are implemented as
part of OpenCV,

150
00:06:32.345 --> 00:06:34.310
making them easy
for you to try out.

151
00:06:34.310 --> 00:06:37.160
Just follow the links shown
at the bottom of this slide.

152
00:06:37.160 --> 00:06:38.900
As a reminder, you can

153
00:06:38.900 --> 00:06:41.420
download these lecture slides
for your review.

154
00:06:41.420 --> 00:06:44.374
By now, you should have
a much better understanding

155
00:06:44.374 --> 00:06:47.105
of feature detection,
description, and matching.

156
00:06:47.105 --> 00:06:49.520
These three steps
are required to use

157
00:06:49.520 --> 00:06:52.280
features for various
self-driving applications,

158
00:06:52.280 --> 00:06:55.580
such as visual odometry
and object detection.

159
00:06:55.580 --> 00:06:58.055
Our brute force matcher
is pretty deep,

160
00:06:58.055 --> 00:07:00.020
but still far from perfect.

161
00:07:00.020 --> 00:07:02.690
We really need
precise results to create

162
00:07:02.690 --> 00:07:05.615
safe and reliable
self-driving car perception.

163
00:07:05.615 --> 00:07:07.160
So in the next lesson,

164
00:07:07.160 --> 00:07:08.690
we will learn how to improve

165
00:07:08.690 --> 00:07:11.600
our brute force matcher
to accommodate some of

166
00:07:11.600 --> 00:07:14.015
the troublesome and
ambiguous matches

167
00:07:14.015 --> 00:07:16.505
that frequently lead
to incorrect results.

168
00:07:16.505 --> 00:07:18.990
See you in the next video.